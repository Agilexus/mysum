import { useState, useEffect } from 'react';
import { View, Text } from 'react-native';
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
import AsyncStorage from '@react-native-async-storage/async-storage';

import SourceTitle from '@/components/sourceTitle/SourceTitle';
import HintBlock from '@/components/ui/HintBlock';
import CustomInput from '../ui/CustomInput';
import CustomButton from '../ui/CustomButton';
import { Source } from '@/components/types'; 

import styles from './emptyMonth.styles';

interface EmptyMonthProps {
  onSubmit: (sources: Source[]) => void;
  monthKey: string;
  initialSources?: Source[];
}

export default function EmptyMonth({ onSubmit, monthKey, initialSources = [] }: EmptyMonthProps) {
    const [sources, setSources] = useState<Source[]>(initialSources.length > 0 ? initialSources : [
      { id: 1, name: '–î–∂–µ—Ä–µ–ª–æ 1', USD: '', EUR: '', UAH: '' }
    ]);

    // üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    useEffect(() => {
        const loadSavedData = async () => {
            try {
                const savedData = await AsyncStorage.getItem(`balance_${monthKey}`);
                if (savedData) {
                    setSources(JSON.parse(savedData));
                }
            } catch (error) {
                console.error('Error loading saved balance:', error);
            }
        };
        loadSavedData();
    }, [monthKey]);

    const addSource = () => {
        const newSource: Source = {
            id: sources.length + 1,
            name: `–î–∂–µ—Ä–µ–ª–æ ${sources.length + 1}`,
            USD: '',
            EUR: '',
            UAH: ''
        };
        setSources([...sources, newSource]);
    };

    const updateSourceName = (id: number, newName: string) => {
        setSources(sources.map(source =>
            source.id === id ? { ...source, name: newName } : source
        ));
    };

    const updateSourceValue = (id: number, field: keyof Source, value: string) => {
        setSources(sources.map(source =>
            source.id === id ? { ...source, [field]: value } : source
        ));
    };

    const deleteSource = (id: number) => {
        setSources(sources.filter(source => source.id !== id));
    };

    // üöÄ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    const handleSubmit = async () => {
        try {
            await AsyncStorage.setItem(monthKey, JSON.stringify(sources));  // –ó–∞–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å
            onSubmit(sources); 
        } catch (error) {
            console.error('Error saving balance:', error);
        }
    };

    return (
        <View style={styles.container}>
            <KeyboardAwareScrollView  
                contentContainerStyle={{ paddingBottom: 100 }}
                keyboardShouldPersistTaps="handled"
                enableOnAndroid
                enableAutomaticScroll
                enableResetScrollToCoords={false}>
                
                <Text style={[styles.title]}>–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ë–∞–ª–∞–Ω—Å—É</Text>
                <HintBlock text="–ü–æ—á–Ω–∏ –∑—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∂–µ—Ä–µ–ª–∞ (–º—ñ—Å—Ü–µ –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∞–∫—Ç–∏–≤–∏) —Ç–∞ –¥–∞–π –π–æ–º—É –∑—Ä–æ–∑—É–º—ñ–ª—É –¥–ª—è —Ç–µ–±–µ –Ω–∞–∑–≤—É." />
                
                {sources.map((source) => (
                    <View key={source.id} >
                        <SourceTitle
                            title={source.name}
                            onChangeTitle={(newName: string) => updateSourceName(source.id, newName)}
                            onDelete={() => deleteSource(source.id)}
                            showDelete={sources.length > 1}
                        />

                        <HintBlock text="–Ø–∫—â–æ –¥–∂–µ—Ä–µ–ª–æ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–µ, –≤–∫–∞–∂–∏ –¥–∞–Ω—ñ –ø–æ –∫–æ–∂–Ω—ñ–π –≤–∞–ª—é—Ç—ñ –æ–∫—Ä–µ–º–æ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–∞–≤—à–∏ –±–∞–ª–∞–Ω—Å." />

                        <CustomInput
                            style={[styles.input]}
                            label="USD ‚Äì –∑–∞–ª–∏—à–æ–∫"
                            placeholder="0,00"
                            allowNumbersOnly
                            value={source.USD}
                            onChangeText={(value) => updateSourceValue(source.id, 'USD', value)}
                        />
                        <CustomInput 
                            style={styles.input}
                            label="EUR ‚Äì –∑–∞–ª–∏—à–æ–∫"
                            placeholder="0,00"
                            allowNumbersOnly
                            value={source.EUR}
                            onChangeText={(value) => updateSourceValue(source.id, 'EUR', value)}
                        />
                        <CustomInput 
                            style={styles.input}
                            label="UAH ‚Äì –∑–∞–ª–∏—à–æ–∫"
                            placeholder="0,00"
                            allowNumbersOnly
                            value={source.UAH}
                            onChangeText={(value) => updateSourceValue(source.id, 'UAH', value)}
                        />
                    </View>
                ))}
            </KeyboardAwareScrollView>

            <View style={styles.fixedButtonContainer}>
                <CustomButton 
                    title="–î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω–µ –¥–∂–µ—Ä–µ–ª–æ" 
                    onPress={addSource} 
                    type="ghost" />
                <CustomButton 
                    title="–ó–±–µ—Ä–µ–≥—Ç–∏ –ë–∞–ª–∞–Ω—Å" 
                    onPress={handleSubmit} />
            </View>
        </View>
    );
}
